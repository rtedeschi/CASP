T("{", L_CU_BRACKET)
T("}", R_CU_BRACKET)
T("(", L_PAREN)
T(")", R_PAREN)
T("[", L_SQ_BRACKET)
T("]", L_SQ_BRACKET)
T("*", ASTERISK)
T("%", MOD)
T("-", MINUS)
T("--", DECR)
T("+", PLUS)
T("++", INCR)
T("=", ASSIGN)
T("==", EQ)
T("<", LT)
T("<=", LT_EQ)
T(">", GT)
T(">=", GT_EQ)
T("!", NOT)
T("!=", NOT_EQ)
T("&", BITAND)
T("&&", AND)
T("|", BITOR)
T("||", OR)
T(",", COMMA)
T(".", PERIOD)
T(@"[0123456789]*.[0123456789]*", FLOAT_LITERAL)
T(@"[_abcddefghijklmnopqrstuvwxyzA-Z][_a-zA-Z\d]*", ID)
T(@"\d*", INT_LITERAL)
T(";", SEMICOLON)
T("/", SLASH)


{current_state, read_character_set} -> {target_state}
(i, {) -> 1
(i, }) -> 2
(i, () -> 3
(i, )) -> 4
(i, [) -> 5
(i, ]) -> 6
(i, *) -> 7
(i, %) -> 8
(i, -) -> 9
(i, +) -> 11
(i, =) -> 13
(i, <) -> 15
(i, >) -> 17
(i, !) -> 19
(i, &) -> 21
(i, |) -> 23
(i, ,) -> 25
(i, .) -> 26
(i, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_) -> 28
(i, 0123456789) -> 30
(i, ;) -> 31
(i, /) -> 32

(9, -) -> 10
(9, .) -> 27
(9, 0123456789) -> 30

(11, +) -> 12
(11, .) -> 27
(11, 0123456789) -> 30

(13, =) -> 14

(15, =) -> 16

(17, =) -> 18

(19, =) -> 20

(21, &) -> 22

(23, |) -> 24

(26, 0123456789) -> 27

(27, 0123456789) -> 27

(28, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_) -> 28
(28, 0123456789) -> 29

(29, abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_) -> 28
(29, 0123456789) -> 29

(30, .) -> 27
(30, 0123456789) -> 30

I(i)
F(1, L_CU_BRACKET)
F(2, R_CU_BRACKET)
F(3, L_PAREN)
F(4, R_PAREN)
F(5, L_SQ_BRACKET)
F(6, L_SQ_BRACKET)
F(7, ASTERISK)
F(8, MOD)
F(9, MINUS)
F(10, DECR)
F(11, PLUS)
F(12, INCR)
F(13, ASSIGN)
F(14, EQ)
F(15, LT)
F(16, LT_EQ)
F(17, GT)
F(18, GT_EQ)
F(19, NOT)
F(20, NOT_EQ)
F(21, BITAND)
F(22, AND)
F(23, BITOR)
F(24, OR)
F(25, COMMA)
F(26, PERIOD)
F(27, FLOAT_LITERAL)
F(28, ID)
F(29, ID)
F(30, INT_LITERAL)
F(31, SEMICOLON)
F(32, SLASH)

ReservedWord(int)
ReservedWord(integer)
ReservedWord(long)
ReservedWord(short)
ReservedWord(byte)
ReservedWord(float)
ReservedWord(double)
ReservedWord(real)
ReservedWord(precision)
ReservedWord(fixed)
ReservedWord(char)
ReservedWord(character)
ReservedWord(bool)
ReservedWord(boolean)
ReservedWord(void)

ReservedWord(true)
ReservedWord(false)

ReservedWord(for)
ReservedWord(while)
ReservedWord(do)

ReservedWord(if)
ReservedWord(else)

ReservedWord(return)

function-definition =:
<function-return-type> <function-identifier> <function-parameters> <function-body>

statement-list =:
<statement>+

statement =:
(<expression> [SEMICOLON])|<for-loop>|<decision>|<block>

for-loop =:
[RESERVED=for] [L_PAREN] <for-init> [SEMICOLON] <for-condition> [SEMICOLON] <for-increment> [R_PAREN] <for-body>

decision =:
[RESERVED=if] [L_PAREN] <expression> [R_PAREN] (<block>|<statement>|[SEMICOLON]) <decision-case>* <decision-fallback>?

decision-case =:
[RESERVED=else] [RESERVED=if] [L_PAREN] <expression> [R_PAREN] (<block>|<statement>|[SEMICOLON]) 

decision-fallback =:
[RESERVED=else] (<block>|<statement>|[SEMICOLON])

block =:
[L_CU_BRACKET] <statement-list>? [R_CU_BRACKET]

method-invokation =:
<function-identifier> [L_PAREN] <arg-list>? [R_PAREN]

declaration-list =:
<declaration> ([COMMA] <declaration>)*

arg-list =:
<expression> ([COMMA] <expression>)*

expression =:
([L_PAREN] <expression> [R_PAREN])|<method-invokation>|<declaration>|<assignment>|<binary-expression>|<unary-expression>|<literal>|<return>|<identifier>

declaration =:
<type> [ID] ([ASSIGN] <expression>)?

assignment =:
[ID] [ASSIGN] <expression>

binary-expression =:
<relational-expression>|<algebraic-expression>|<logical-expression>

relational-expression =:
<literal>|[ID] (<relational-binary-op> <expression>)+

algebraic-expression =:
<literal>|[ID] (<math-binary-op> <expression>)+

logical-expression =:
<literal>|[ID] (<logical-binary-op> <expression>)+


unary-expression =:
([NOT] [ID])|([ID] <unary-op>)|(<unary-op> [ID])

literal =:
<bool-literal>|[FLOAT_LITERAL]|[INT_LITERAL]

type =:
<primitive-type>|[ID] [ASTERISK]*

primitive-type =:
<int-primitive>|<float-primitive>|<fixed-primitive>|<char-primitive>|<bool-primitive>|<void>

binary-op =:
<math-binary-op>|<logical-binary-op>|<relational-binary-op>

return =:
[RESERVED=return] <expression>?


void =:
[RESERVED=void]

int-primitive =:
[RESERVED=int]|[RESERVED=long]|[RESERVED=short]|[RESERVED=byte]|[RESERVED=integer]

float-primitive =:
[RESERVED=float]|[RESERVED=double]|[RESERVED=real]|([RESERVED=double] [RESERVED=precision])

fixed-primitive =:
[RESERVED=fixed]

char-primitive =:
[RESERVED=char]|[RESERVED=character]

bool-primitive =:
[RESERVED=bool]|[RESERVED=boolean]

bool-literal =:
[RESERVED=true]|[RESERVED=false]

math-binary-op =:
[PLUS]|[MINUS]|[ASTERISK]|[SLASH]

logical-binary-op =:
[BITAND]|[AND]|[BITOR]|[OR]

relational-binary-op =:
[EQ]|[LT]|[LT_EQ]|[GT]|[GT_EQ]|[NOT_EQ]

unary-op =:
[INCR]|[DECR]


function-return-type =:
<type>

function-identifier =:
[ID]

function-parameters =:
[L_PAREN] <declaration-list>? [R_PAREN]

function-body =:
<block>


for-init =:
<expression>?

for-condition =:
<expression>?

for-increment =:
<expression>?

for-body =:
<block>|<statement>|[SEMICOLON]

identifier =:
[ID]

